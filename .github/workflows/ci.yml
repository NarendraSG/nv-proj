name: PR Commit Analysis

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  analyze-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is fetched

      - name: Get list of commits in PR
        id: get_commits
        run: |
          PR_COMMITS=$(git log --pretty=format:"%H" origin/${{ github.base_ref }}..HEAD | tail -n +2 | tr '\n' ' ')
          echo "PR_COMMITS=$PR_COMMITS" >> $GITHUB_ENV

      - name: Analyze modified lines in each commit
        run: |
          for commit in $PR_COMMITS; do
            echo "Analyzing commit: $commit"

            # Get the list of changed files with status (ignoring metadata lines)
            git show --name-status $commit | awk 'NF==2' | while read status file; do
              # Skip deleted files
              if [[ $status == "D" ]]; then
                continue
              fi

              # Ensure file exists before proceeding
              if [[ ! -f "$file" ]]; then
                echo "Skipping missing file: $file"
                continue
              fi

              echo "Processing file: $file with status: $status"

              # Get modified line ranges
              git diff --unified=0 $commit^ $commit -- $file | grep -E "^@@" | \
                awk -F' ' '{print $2}' | sed 's/[^0-9,]//g' | while read line_range; do
                  start_line=$(echo $line_range | cut -d, -f1)
                  end_line=$((start_line + $(echo $line_range | cut -d, -f2) - 1))

                  echo "Modified lines: $start_line-$end_line in $file"

                  # Get commit history for these lines
                  commit_history=$(git log -p -L $start_line,$end_line:$file 2>/dev/null | grep "commit " | awk '{print $2}')

                  # Extract last two commits
                  last_two_commits=($(echo "$commit_history" | head -n 2))
                  if [[ ${#last_two_commits[@]} -eq 2 ]]; then
                    date1=$(git show -s --format=%ct ${last_two_commits[0]})
                    date2=$(git show -s --format=%ct ${last_two_commits[1]})
                    duration=$((date1 - date2))
                    echo "Duration between last two commits: $duration seconds"
                  else
                    echo "Not enough commit history for duration calculation"
                  fi
                done
            done
          done
